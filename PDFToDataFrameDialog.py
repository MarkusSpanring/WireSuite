#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.9pre on Thu Apr  9 15:31:26 2020
#

import wx
import os
import pandas as pd
import PDFToDataFrame as pdfocr

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class PDFToDataFrameDialog(wx.Dialog):
    def __init__(self, parent=None, *args, **kwds):
        # begin wxGlade: PDFToDataFrameGUI.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        super(PDFToDataFrameDialog, self).__init__(parent, *args, **kwds)

        self.SetSize((893, 690))
        self.SetTitle("frame")

        self.PhotoMaxSize = 600
        self.currentPage = -1
        self.pdfPages = []
        self.clusters = []
        self.extractedData = pd.DataFrame([])
        self.extractedImage = wx.Bitmap( wx.Image(1,1,clear=True) )

        mainSizer = wx.BoxSizer(wx.VERTICAL)

        topSizer = wx.BoxSizer(wx.HORIZONTAL)
        mainSizer.Add(topSizer, 1, wx.EXPAND, 0)

        self.btnBack = wx.Button(self, wx.ID_ANY, "<<")
        topSizer.Add(self.btnBack, 0, wx.ALL, 5)

        self.btnForward = wx.Button(self, wx.ID_ANY, ">>")
        topSizer.Add(self.btnForward, 0, wx.ALL, 5)

        self.btnSelectPage = wx.Button(self, wx.ID_ANY, u"Seite auswählen")
        topSizer.Add(self.btnSelectPage, 0, wx.ALL, 5)

        img = wx.Image(1000,self.PhotoMaxSize)
        self.pdfPage = wx.StaticBitmap(self, wx.ID_ANY, wx.Bitmap(img))
        mainSizer.Add(self.pdfPage, 0, wx.EXPAND, 0)

        bottomSizer = wx.BoxSizer(wx.HORIZONTAL)
        mainSizer.Add(bottomSizer, 1, wx.EXPAND, 0)

        self.btnImportPDF = wx.Button(self, wx.ID_ANY, "PDF importieren")
        bottomSizer.Add(self.btnImportPDF, 0, wx.ALL, 5)

        self_2 = wx.Panel(self, wx.ID_ANY)
        self_2.SetMinSize((630, 22))
        bottomSizer.Add(self_2, 1, 0, 0)

        self.scClusterIdx = wx.SpinCtrl(self, wx.ID_ANY, "0", min=1, max=1)
        self.scClusterIdx.SetMinSize((50, 22))
        bottomSizer.Add(self.scClusterIdx, 0, wx.ALL, 5)

        self.btnSelectCluster = wx.Button(self, wx.ID_ANY, "Daten extrahieren")
        bottomSizer.Add(self.btnSelectCluster, 0, wx.ALL, 5)

        self.SetSizer(mainSizer)

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.onPageBackClicked, self.btnBack)
        self.Bind(wx.EVT_BUTTON, self.onPageForwardClicked, self.btnForward)
        self.Bind(wx.EVT_BUTTON, self.onSelectPageClicked, self.btnSelectPage)
        self.Bind(wx.EVT_BUTTON, self.onImportPDFClicked, self.btnImportPDF)
        self.Bind(wx.EVT_BUTTON, self.onSelectClusterClicked, self.btnSelectCluster)
        # end wxGlade

        self.btnBack.Disable()
        self.btnForward.Disable()
        self.btnSelectPage.Disable()
        self.btnSelectCluster.Disable()

    def onPageBackClicked(self, event):  # wxGlade: PDFToDataFrameGUI.<event_handler>

        self.btnForward.Enable()
        self.currentPage -= 1
        if (self.currentPage - 1) < 0:
            self.btnBack.Disable()

        self.onView()

    def onPageForwardClicked(self, event):  # wxGlade: PDFToDataFrameGUI.<event_handler>

        self.btnBack.Enable()
        self.currentPage += 1
        if self.currentPage + 1 == len(self.pdfPages):
            self.btnForward.Disable()
        self.onView()

    def onSelectPageClicked(self, event):  # wxGlade: PDFToDataFrameGUI.<event_handler>
        outfolder = os.path.dirname(self.pdfPages[self.currentPage])
        img, contours = pdfocr.find_contours_in_image(self.pdfPages[self.currentPage])
        self.clusters = pdfocr.BoxClusters(img, outfolder = outfolder)
        self.clusters.build_clusters(contours=contours)

        self.pdfPages = [self.clusters.mark_clusters_in_image()]
        self.currentPage = 0
        self.btnBack.Disable()
        self.btnForward.Disable()

        self.btnSelectCluster.Enable()
        self.scClusterIdx.SetMax(self.clusters.size())
        self.scClusterIdx.SetValue(1)


        self.onView()

    def onImportPDFClicked(self, event):  # wxGlade: MyDialog.<event_handler>

        dialog = wx.FileDialog(None, "Öffnen", "", "", "Excel Dateien (*.pdf)|*.pdf",
                                     wx.FD_OPEN | wx.FD_FILE_MUST_EXIST)
        if dialog.ShowModal() == wx.ID_OK:
            self.pdfPages = pdfocr.save_images_from_pdf(dialog.GetPath())
            self.currentPage = 0
            self.btnBack.Disable()
            self.btnForward.Disable()
            self.btnSelectPage.Enable()
            self.btnSelectCluster.Disable()
            if len(self.pdfPages) > 1:
                self.btnForward.Enable()

            elif len(self.pdfPages) == 1:
                self.btnSelectPage.Disable()
                self.onSelectPageClicked(event)

        dialog.Destroy()

        self.onView()

    def onView(self):

        img = wx.Image(self.pdfPages[self.currentPage], wx.BITMAP_TYPE_ANY)
        # scale the image, preserving the aspect ratio
        W = img.GetWidth()
        H = img.GetHeight()

        NewH = self.PhotoMaxSize
        NewW = self.PhotoMaxSize * W / H

        img = img.Scale(NewW,NewH)
        self.pdfPage.SetBitmap(wx.Bitmap(img))
        self.Refresh()

    def onSelectClusterClicked(self, event):  # wxGlade: MyDialog.<event_handler>

        clusterIdx = int(self.scClusterIdx.GetValue()) - 1

        image_path = self.clusters.get_cluster_image(clusterIdx)
        img=  wx.Image(image_path, wx.BITMAP_TYPE_ANY)
        newW = 1000*( img.GetWidth() / img.GetHeight() )
        self.extractedImage = wx.Bitmap( img.Scale(newW,1000) )

        self.extractedData = self.clusters.get_df_from_cluster(clusterIdx)
        self.Close()

    def getImage(self):
        return self.extractedImage

    def getData(self):
        return self.extractedData

# end of class PDFToDataFrameGUI

class MyApp(wx.App):
    def OnInit(self):
        self.frame = PDFToDataFrameGUI(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp

if __name__ == "__main__":
    app = MyApp(0)
    app.MainLoop()
